#pragma once

#include <rt/GCObject.h>
#include <System.Private.CoreLib/System/Boolean.h>
#include <System.Private.CoreLib/System/Int32.h>

namespace System::Private::CoreLib::System {
FORWARD_(Array, T1, T2)
FORWARD(Object)
FORWARD(Type)
} // namespace System::Private::CoreLib::System
namespace System::Private::CoreLib::System::Collections {
FORWARD(IEnumerator)
FORWARD(ICollection)
FORWARD(IComparer)
FORWARD(IList)
namespace ArrayListNamespace {
CLASS(ArrayList) {
  private: CLASS(IListWrapper) {
    private: CLASS(IListWrapperEnumWrapper) {
      public: Object get_Current();
      public: Object Clone();
      public: Boolean MoveNext();
      public: void Reset();
      private: IEnumerator _en;
      private: Int32 _remaining;
      private: Int32 _initialStartIndex;
      private: Int32 _initialCount;
      private: Boolean _firstCall;
    };
    public: Int32 get_Capacity();
    public: void set_Capacity(Int32 value);
    public: Int32 get_Count();
    public: Boolean get_IsReadOnly();
    public: Boolean get_IsFixedSize();
    public: Boolean get_IsSynchronized();
    public: Object get_Item(Int32 index);
    public: void set_Item(Int32 index, Object value);
    public: Object get_SyncRoot();
    public: Int32 Add(Object obj);
    public: void AddRange(ICollection c);
    public: Int32 BinarySearch(Int32 index, Int32 count, Object value, IComparer comparer);
    public: void Clear();
    public: Object Clone();
    public: Boolean Contains(Object obj);
    public: void CopyTo(Array<> array, Int32 index);
    public: void CopyTo(Int32 index, Array<> array, Int32 arrayIndex, Int32 count);
    public: IEnumerator GetEnumerator();
    public: IEnumerator GetEnumerator(Int32 index, Int32 count);
    public: Int32 IndexOf(Object value);
    public: Int32 IndexOf(Object value, Int32 startIndex);
    public: Int32 IndexOf(Object value, Int32 startIndex, Int32 count);
    public: void Insert(Int32 index, Object obj);
    public: void InsertRange(Int32 index, ICollection c);
    public: Int32 LastIndexOf(Object value);
    public: Int32 LastIndexOf(Object value, Int32 startIndex);
    public: Int32 LastIndexOf(Object value, Int32 startIndex, Int32 count);
    public: void Remove(Object value);
    public: void RemoveAt(Int32 index);
    public: void RemoveRange(Int32 index, Int32 count);
    public: void Reverse(Int32 index, Int32 count);
    public: void SetRange(Int32 index, ICollection c);
    public: ArrayList GetRange(Int32 index, Int32 count);
    public: void Sort(Int32 index, Int32 count, IComparer comparer);
    public: Array<Object> ToArray();
    public: Array<> ToArray(Type type);
    public: void TrimToSize();
    private: IList _list;
  };
  private: CLASS(SyncArrayList) {
    public: Int32 get_Capacity();
    public: void set_Capacity(Int32 value);
    public: Int32 get_Count();
    public: Boolean get_IsReadOnly();
    public: Boolean get_IsFixedSize();
    public: Boolean get_IsSynchronized();
    public: Object get_Item(Int32 index);
    public: void set_Item(Int32 index, Object value);
    public: Object get_SyncRoot();
    public: Int32 Add(Object value);
    public: void AddRange(ICollection c);
    public: Int32 BinarySearch(Object value);
    public: Int32 BinarySearch(Object value, IComparer comparer);
    public: Int32 BinarySearch(Int32 index, Int32 count, Object value, IComparer comparer);
    public: void Clear();
    public: Object Clone();
    public: Boolean Contains(Object item);
    public: void CopyTo(Array<> array);
    public: void CopyTo(Array<> array, Int32 index);
    public: void CopyTo(Int32 index, Array<> array, Int32 arrayIndex, Int32 count);
    public: IEnumerator GetEnumerator();
    public: IEnumerator GetEnumerator(Int32 index, Int32 count);
    public: Int32 IndexOf(Object value);
    public: Int32 IndexOf(Object value, Int32 startIndex);
    public: Int32 IndexOf(Object value, Int32 startIndex, Int32 count);
    public: void Insert(Int32 index, Object value);
    public: void InsertRange(Int32 index, ICollection c);
    public: Int32 LastIndexOf(Object value);
    public: Int32 LastIndexOf(Object value, Int32 startIndex);
    public: Int32 LastIndexOf(Object value, Int32 startIndex, Int32 count);
    public: void Remove(Object value);
    public: void RemoveAt(Int32 index);
    public: void RemoveRange(Int32 index, Int32 count);
    public: void Reverse(Int32 index, Int32 count);
    public: void SetRange(Int32 index, ICollection c);
    public: ArrayList GetRange(Int32 index, Int32 count);
    public: void Sort();
    public: void Sort(IComparer comparer);
    public: void Sort(Int32 index, Int32 count, IComparer comparer);
    public: Array<Object> ToArray();
    public: Array<> ToArray(Type type);
    public: void TrimToSize();
    private: ArrayList _list;
    private: Object _root;
  };
  private: CLASS(SyncIList) {
    public: Int32 get_Count();
    public: Boolean get_IsReadOnly();
    public: Boolean get_IsFixedSize();
    public: Boolean get_IsSynchronized();
    public: Object get_Item(Int32 index);
    public: void set_Item(Int32 index, Object value);
    public: Object get_SyncRoot();
    public: Int32 Add(Object value);
    public: void Clear();
    public: Boolean Contains(Object item);
    public: void CopyTo(Array<> array, Int32 index);
    public: IEnumerator GetEnumerator();
    public: Int32 IndexOf(Object value);
    public: void Insert(Int32 index, Object value);
    public: void Remove(Object value);
    public: void RemoveAt(Int32 index);
    private: IList _list;
    private: Object _root;
  };
  private: CLASS(FixedSizeList) {
    public: Int32 get_Count();
    public: Boolean get_IsReadOnly();
    public: Boolean get_IsFixedSize();
    public: Boolean get_IsSynchronized();
    public: Object get_Item(Int32 index);
    public: void set_Item(Int32 index, Object value);
    public: Object get_SyncRoot();
    public: Int32 Add(Object obj);
    public: void Clear();
    public: Boolean Contains(Object obj);
    public: void CopyTo(Array<> array, Int32 index);
    public: IEnumerator GetEnumerator();
    public: Int32 IndexOf(Object value);
    public: void Insert(Int32 index, Object obj);
    public: void Remove(Object value);
    public: void RemoveAt(Int32 index);
    private: IList _list;
  };
  private: CLASS(FixedSizeArrayList) {
    public: Int32 get_Count();
    public: Boolean get_IsReadOnly();
    public: Boolean get_IsFixedSize();
    public: Boolean get_IsSynchronized();
    public: Object get_Item(Int32 index);
    public: void set_Item(Int32 index, Object value);
    public: Object get_SyncRoot();
    public: Int32 get_Capacity();
    public: void set_Capacity(Int32 value);
    public: Int32 Add(Object obj);
    public: void AddRange(ICollection c);
    public: Int32 BinarySearch(Int32 index, Int32 count, Object value, IComparer comparer);
    public: void Clear();
    public: Object Clone();
    public: Boolean Contains(Object obj);
    public: void CopyTo(Array<> array, Int32 index);
    public: void CopyTo(Int32 index, Array<> array, Int32 arrayIndex, Int32 count);
    public: IEnumerator GetEnumerator();
    public: IEnumerator GetEnumerator(Int32 index, Int32 count);
    public: Int32 IndexOf(Object value);
    public: Int32 IndexOf(Object value, Int32 startIndex);
    public: Int32 IndexOf(Object value, Int32 startIndex, Int32 count);
    public: void Insert(Int32 index, Object obj);
    public: void InsertRange(Int32 index, ICollection c);
    public: Int32 LastIndexOf(Object value);
    public: Int32 LastIndexOf(Object value, Int32 startIndex);
    public: Int32 LastIndexOf(Object value, Int32 startIndex, Int32 count);
    public: void Remove(Object value);
    public: void RemoveAt(Int32 index);
    public: void RemoveRange(Int32 index, Int32 count);
    public: void SetRange(Int32 index, ICollection c);
    public: ArrayList GetRange(Int32 index, Int32 count);
    public: void Reverse(Int32 index, Int32 count);
    public: void Sort(Int32 index, Int32 count, IComparer comparer);
    public: Array<Object> ToArray();
    public: Array<> ToArray(Type type);
    public: void TrimToSize();
    private: ArrayList _list;
  };
  private: CLASS(ReadOnlyList) {
    public: Int32 get_Count();
    public: Boolean get_IsReadOnly();
    public: Boolean get_IsFixedSize();
    public: Boolean get_IsSynchronized();
    public: Object get_Item(Int32 index);
    public: void set_Item(Int32 index, Object value);
    public: Object get_SyncRoot();
    public: Int32 Add(Object obj);
    public: void Clear();
    public: Boolean Contains(Object obj);
    public: void CopyTo(Array<> array, Int32 index);
    public: IEnumerator GetEnumerator();
    public: Int32 IndexOf(Object value);
    public: void Insert(Int32 index, Object obj);
    public: void Remove(Object value);
    public: void RemoveAt(Int32 index);
    private: IList _list;
  };
  private: CLASS(ReadOnlyArrayList) {
    public: Int32 get_Count();
    public: Boolean get_IsReadOnly();
    public: Boolean get_IsFixedSize();
    public: Boolean get_IsSynchronized();
    public: Object get_Item(Int32 index);
    public: void set_Item(Int32 index, Object value);
    public: Object get_SyncRoot();
    public: Int32 get_Capacity();
    public: void set_Capacity(Int32 value);
    public: Int32 Add(Object obj);
    public: void AddRange(ICollection c);
    public: Int32 BinarySearch(Int32 index, Int32 count, Object value, IComparer comparer);
    public: void Clear();
    public: Object Clone();
    public: Boolean Contains(Object obj);
    public: void CopyTo(Array<> array, Int32 index);
    public: void CopyTo(Int32 index, Array<> array, Int32 arrayIndex, Int32 count);
    public: IEnumerator GetEnumerator();
    public: IEnumerator GetEnumerator(Int32 index, Int32 count);
    public: Int32 IndexOf(Object value);
    public: Int32 IndexOf(Object value, Int32 startIndex);
    public: Int32 IndexOf(Object value, Int32 startIndex, Int32 count);
    public: void Insert(Int32 index, Object obj);
    public: void InsertRange(Int32 index, ICollection c);
    public: Int32 LastIndexOf(Object value);
    public: Int32 LastIndexOf(Object value, Int32 startIndex);
    public: Int32 LastIndexOf(Object value, Int32 startIndex, Int32 count);
    public: void Remove(Object value);
    public: void RemoveAt(Int32 index);
    public: void RemoveRange(Int32 index, Int32 count);
    public: void SetRange(Int32 index, ICollection c);
    public: ArrayList GetRange(Int32 index, Int32 count);
    public: void Reverse(Int32 index, Int32 count);
    public: void Sort(Int32 index, Int32 count, IComparer comparer);
    public: Array<Object> ToArray();
    public: Array<> ToArray(Type type);
    public: void TrimToSize();
    private: ArrayList _list;
  };
  private: CLASS(ArrayListEnumerator) {
    public: Object get_Current();
    public: Object Clone();
    public: Boolean MoveNext();
    public: void Reset();
    private: ArrayList _list;
    private: Int32 _index;
    private: Int32 _endIndex;
    private: Int32 _version;
    private: Object _currentElement;
    private: Int32 _startIndex;
  };
  private: CLASS(Range) {
    public: Int32 get_Capacity();
    public: void set_Capacity(Int32 value);
    public: Int32 get_Count();
    public: Boolean get_IsReadOnly();
    public: Boolean get_IsFixedSize();
    public: Boolean get_IsSynchronized();
    public: Object get_SyncRoot();
    public: Object get_Item(Int32 index);
    public: void set_Item(Int32 index, Object value);
    private: void InternalUpdateRange();
    private: void InternalUpdateVersion();
    public: Int32 Add(Object value);
    public: void AddRange(ICollection c);
    public: Int32 BinarySearch(Int32 index, Int32 count, Object value, IComparer comparer);
    public: void Clear();
    public: Object Clone();
    public: Boolean Contains(Object item);
    public: void CopyTo(Array<> array, Int32 index);
    public: void CopyTo(Int32 index, Array<> array, Int32 arrayIndex, Int32 count);
    public: IEnumerator GetEnumerator();
    public: IEnumerator GetEnumerator(Int32 index, Int32 count);
    public: ArrayList GetRange(Int32 index, Int32 count);
    public: Int32 IndexOf(Object value);
    public: Int32 IndexOf(Object value, Int32 startIndex);
    public: Int32 IndexOf(Object value, Int32 startIndex, Int32 count);
    public: void Insert(Int32 index, Object value);
    public: void InsertRange(Int32 index, ICollection c);
    public: Int32 LastIndexOf(Object value);
    public: Int32 LastIndexOf(Object value, Int32 startIndex);
    public: Int32 LastIndexOf(Object value, Int32 startIndex, Int32 count);
    public: void RemoveAt(Int32 index);
    public: void RemoveRange(Int32 index, Int32 count);
    public: void Reverse(Int32 index, Int32 count);
    public: void SetRange(Int32 index, ICollection c);
    public: void Sort(Int32 index, Int32 count, IComparer comparer);
    public: Array<Object> ToArray();
    public: Array<> ToArray(Type type);
    public: void TrimToSize();
    private: ArrayList _baseList;
    private: Int32 _baseIndex;
    private: Int32 _baseSize;
    private: Int32 _baseVersion;
  };
  private: CLASS(ArrayListEnumeratorSimple) {
    public: Object get_Current();
    public: Object Clone();
    public: Boolean MoveNext();
    public: void Reset();
    private: ArrayList _list;
    private: Int32 _index;
    private: Int32 _version;
    private: Object _currentElement;
    private: Boolean _isArrayList;
    private: static Object s_dummyObject;
  };
  public: CLASS(ArrayListDebugView) {
    public: Array<Object> get_Items();
    private: ArrayList _arrayList;
  };
  public: Int32 get_Capacity();
  public: void set_Capacity(Int32 value);
  public: Int32 get_Count();
  public: Boolean get_IsFixedSize();
  public: Boolean get_IsReadOnly();
  public: Boolean get_IsSynchronized();
  public: Object get_SyncRoot();
  public: Object get_Item(Int32 index);
  public: void set_Item(Int32 index, Object value);
  public: static ArrayList Adapter(IList list);
  public: Int32 Add(Object value);
  public: void AddRange(ICollection c);
  public: Int32 BinarySearch(Int32 index, Int32 count, Object value, IComparer comparer);
  public: Int32 BinarySearch(Object value);
  public: Int32 BinarySearch(Object value, IComparer comparer);
  public: void Clear();
  public: Object Clone();
  public: Boolean Contains(Object item);
  public: void CopyTo(Array<> array);
  public: void CopyTo(Array<> array, Int32 arrayIndex);
  public: void CopyTo(Int32 index, Array<> array, Int32 arrayIndex, Int32 count);
  private: void EnsureCapacity(Int32 min);
  public: static IList FixedSize(IList list);
  public: static ArrayList FixedSize(ArrayList list);
  public: IEnumerator GetEnumerator();
  public: IEnumerator GetEnumerator(Int32 index, Int32 count);
  public: Int32 IndexOf(Object value);
  public: Int32 IndexOf(Object value, Int32 startIndex);
  public: Int32 IndexOf(Object value, Int32 startIndex, Int32 count);
  public: void Insert(Int32 index, Object value);
  public: void InsertRange(Int32 index, ICollection c);
  public: Int32 LastIndexOf(Object value);
  public: Int32 LastIndexOf(Object value, Int32 startIndex);
  public: Int32 LastIndexOf(Object value, Int32 startIndex, Int32 count);
  public: static IList ReadOnly(IList list);
  public: static ArrayList ReadOnly(ArrayList list);
  public: void Remove(Object obj);
  public: void RemoveAt(Int32 index);
  public: void RemoveRange(Int32 index, Int32 count);
  public: static ArrayList Repeat(Object value, Int32 count);
  public: void Reverse();
  public: void Reverse(Int32 index, Int32 count);
  public: void SetRange(Int32 index, ICollection c);
  public: ArrayList GetRange(Int32 index, Int32 count);
  public: void Sort();
  public: void Sort(IComparer comparer);
  public: void Sort(Int32 index, Int32 count, IComparer comparer);
  public: static IList Synchronized(IList list);
  public: static ArrayList Synchronized(ArrayList list);
  public: Array<Object> ToArray();
  public: Array<> ToArray(Type type);
  public: void TrimToSize();
  private: Array<Object> _items;
  private: Int32 _size;
  private: Int32 _version;
};
} // namespace ArrayListNamespace
using ArrayList = ArrayListNamespace::ArrayList;
} // namespace System::Private::CoreLib::System::Collections
